<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory Card Game</title>

    <style>
        body {
            background-image: url("background.png");
            text-align: center;
        }

        .score {
            display: flex;
        }

        .grid {
            display: flex;
            text-align: center;
            flex-wrap: wrap;
            width: 400px;
            height: 300px;
            margin-top: 50px;
            margin-left: 420px;
        }
    </style>
</head>
<body>

    <h1>
        PokeFlip
    </h1>

    <h3>
        Score: <span class="display" id="score">0</span>
    </h3>

    <div class="message" id="result">
        Flip open a pokeball to reveal pokaemons!
    </div>
    
    <div class="grid">
    </div>

    <button class="control" id="reset">
        Reset
    </button>

    <script>

        //to display board when tab is opened
        document.addEventListener('DOMContentLoaded', () => {
        
            const cardArr = [
            {
                name: 'pokemon 1',
                img: 'pokemon1.png'
            },
            {
                name: 'pokemon 2',
                img: 'pokemon2.png'
            },
            {
                name: 'pokemon 3',
                img: 'pokemon3.png'
            },
            {
                name: 'pokemon 4',
                img: 'pokemon4.png'
            },
            {
                name: 'pokemon 5',
                img: 'pokemon5.png'
            },
            {
                name: 'pokemon 6',
                img: 'pokemon6.png'
            },
            {
                name: 'pokemon 1',
                img: 'pokemon1.png'
            },
            {
                name: 'pokemon 2',
                img: 'pokemon2.png'
            },
            {
                name: 'pokemon 3',
                img: 'pokemon3.png'
            },
            {
                name: 'pokemon 4',
                img: 'pokemon4.png'
            },
            {
                name: 'pokemon 5',
                img: 'pokemon5.png'
            },
            {
                name: 'pokemon 6',
                img: 'pokemon6.png'
            }
            ];

            //generate cards by randoimly shuffling images inside the array//
            //fisher yates algorithm
            //j = random number
            //temp = temporary values for swapping
            let i = cardArr.length, j, temp;
            //decrement array length
            while(--i > 0){
                //get random number ranging between 0 and i
                j = Math.floor(Math.random() * (i+1)); 
                // swapping
                temp = cardArr[j];
                cardArr[j] = cardArr[i];
                cardArr[i] = temp;
            };

            console.log(cardArr);

            const grid = document.querySelector('.grid');
            const score = document.getElementById('score');
            const result = document.getElementById('result');
            let cardsChosen = [];
            let cardsChosenID = [];
            let cardsMatch = [];

            //function to display the cards in a grid//
            //loop through cardaArr and create image element for each card
            function displayBoard() {

                for (let i = 0; i < cardArr.length; i++) {

                    const card = document.createElement('img')

                    //sets the card image as blank.png
                    //and sets its id from number 0-11
                    card.setAttribute('src', 'blank.png')
                    card.setAttribute('data-id', i)

                    //listen when cards are clicked and
                    //invoke a function to flip them
                    card.addEventListener('click', flipCard)

                    //displays the cards with ids on the .grid
                    grid.appendChild(card)

                }

            };
            
            //invoke the function
            displayBoard()

            //function for flipping the cards
            function flipCard() {

                //declares a variable for the ID's of images 
                //from function displayBoard
                let cardId = this.getAttribute('data-id')

                //push the cards from cardArr
                //using the declared ID
                cardsChosen.push(cardArr[cardId].name)
                cardsChosenID.push(cardId)

                //add image to the board
                //base on the id it holds
                this.setAttribute('src', cardArr[cardId].img)


                //if there are 2 cards chosen
                //invoke check for match
                if (cardsChosen.length === 2) {
                    setTimeout(checkForMatch, 500)
                }
            };

            //checking for matches
            function checkForMatch() {

                const cards = document.querySelectorAll('img')
                const cardOne = cardsChosenID[0]
                const cardTwo = cardsChosenID[1]
                
                //condition when you have clicked the same image//
                if (cardOne === cardTwo) {

                    //displays a message//
                    result.innerHTML = 'You have clicked the same ball!'

                    //sets the card to be blank again
                    cards[cardOne].setAttribute('src', 'blank.png')
                    cards[cardTwo].setAttribute('src', 'blank.png')

                
                //condition when the chosen card is the same//
                } else if (cardsChosen[0] === cardsChosen[1]) {

                    result.innerHTML = 'You found a match.'

                    //removes the function that flips the cards 
                    //when these cards are clicked
                    cards[cardOne].removeEventListener('click', flipCard)
                    cards[cardTwo].removeEventListener('click', flipCard)

                    //pushes the cards that has been matched
                    //into the array of cardsMatch
                    cardsMatch.push(cardsChosen)

                //condition when two cards chosen are not match
                } else {

                    //displays a message
                    result.innerHTML = 'Sorry, try again.'

                    //sets the cards to be blank again
                    cards[cardOne].setAttribute('src', 'blank.png')
                    cards[cardTwo].setAttribute('src', 'blank.png')

                }

                //calls these arrays to get scores
                cardsChosen = []
                cardsChosenID = []

                //displays the score 
                //counting pairs that has been matched 
                //store in array of cardsMatch
                score.innerHTML = cardsMatch.length

                //check if all cards are matched
                if  (cardsMatch.length === cardArr.length/2) {

                    result.innerHTML = 'Congratulations! You matched them all!'

                }
            };

            const reset = document.getElementById('reset');
            reset.addEventListener('click', resetGame);


            //reloads the window location for reset
            //because of *DOMCOntentLoaded
            //to load the game when you open the tab
            function resetGame() {
                location.reload();
            };


        });

    </script>

</body>
</html>
